package software.leonov.concurrent;

import static java.util.Objects.requireNonNull;

import java.util.List;
import java.util.concurrent.AbstractExecutorService;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.FutureTask;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

/**
 * A {@code BoundedExecutorService} enforces a limit on the maximum number of tasks that can be
 * {@link Executor#execute(Runnable) executed} concurrently by another {@code ExecutorService}. Once the maximum number
 * of tasks have been submitted further submissions will block until a previous task finishes executing.
 * <p>
 * Users can use this class to control the concurrency in different sections of their code to avoid overloading a shared
 * global thread pool.
 * <p>
 * <b>Note:</b> A {@code BoundedExecutorService} does not impose a strict limit on number of threads generated by the
 * underlying executor, as this class has no control over the behavior or implementation of the supplied
 * {@code ExecutorService} class. Restricting task submissions alone does not directly affect the number of threads that
 * the underlying executor may create.
 * <p>
 * Consider an executor with an unrestricted thread pool. Let's also assume that this executor has been optimized to
 * initiate task execution immediately upon arrival. In this scenario, it's possible that a new thread is generated, at
 * some point between the completion of a preceding task and the start of the execution of an incoming task. For example
 * if the thread executing a previous task must tidy up after the task completes.
 * 
 * @author Zhenya Leonov
 */
public final class BoundedExecutorService extends AbstractExecutorService {

    private final ExecutorService exec;
    private final Semaphore       semaphore;
    private final int             ntasks;

    /**
     * Creates a new {@code BoundedExecutorService} which will limit the maximum number of tasks that can be executed
     * concurrently by the underlying {@code ExecutorService}.
     * 
     * @param exec   the underlying executor service
     * @param ntasks the maximum number of tasks allowed to execute concurrently
     */
    public BoundedExecutorService(final ExecutorService exec, final int ntasks) {
        requireNonNull(exec, "exec == null");

        if (ntasks < 1)
            throw new IllegalArgumentException("ntasks < 1");

        this.exec      = exec;
        this.semaphore = new Semaphore(ntasks);
        this.ntasks    = ntasks;
    }

    @Override
    public void execute(final Runnable command) {
        requireNonNull(command, "command == null");

        try {
            semaphore.acquire();
            exec.execute(() -> {
                try {
                    command.run();
                } finally {
                    semaphore.release();
                }
            });
        } catch (final RejectedExecutionException e) {
            semaphore.release();
            throw e;
        } catch (final InterruptedException e) {
            semaphore.release();
            Thread.currentThread().interrupt();
        }
    }

    @Override
    public void shutdown() {
        exec.shutdown();
    }

    @Override
    public List<Runnable> shutdownNow() {
        final List<Runnable> tasks = exec.shutdownNow();
        semaphore.release(ntasks);
        return tasks;
    }

    @Override
    public boolean isShutdown() {
        return exec.isShutdown();
    }

    @Override
    public boolean isTerminated() {
        return exec.isTerminated();
    }

    @Override
    public boolean awaitTermination(final long timeout, final TimeUnit unit) throws InterruptedException {
        requireNonNull(unit, "unit == null");
        return exec.awaitTermination(timeout, unit);
    }

    @Override
    protected <T> RunnableFuture<T> newTaskFor(final Runnable runnable, final T value) {
        requireNonNull(runnable, "runnable == null");
        return new Task<T>(runnable, value);
    }

    @Override
    protected <T> RunnableFuture<T> newTaskFor(final Callable<T> callable) {
        requireNonNull(callable, "callable == null");
        return new Task<T>(callable);
    }

    private class Task<T> extends FutureTask<T> {

        Task(final Runnable runnable, final T result) {
            super(runnable, result);
        }

        Task(final Callable<T> callable) {
            super(callable);
        }

        @Override
        protected void done() {
            semaphore.release();
        }
    }

}